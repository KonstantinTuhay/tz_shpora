import React from "react";
// import { useNavigate } from "react-router-dom";
import NavigateHelpers from "../../helpers/NavigateHelpers";

const ReactThis = (props) => {
  // const navigate = useNavigate();

  // const general = () => {
  //   navigate("/");
  // };

  // const nextPage = () => {
  //   navigate("/inthebegining");
  // };

  return (
    <div>
      <h2>Routing</h2>

      <p>
        Основная цель роутинга в веб-приложениях заключается в том, чтобы
        позволить пользователям перемещаться по различным частям приложения БЕЗ
        ПЕРЕЗАГРУЗКИ страницы. Вместо того, чтобы каждый раз отправлять запрос
        на сервер и загружать новую страницу, роутинг позволяет динамически
        обновлять только необходимые компоненты или данные в соответствии с
        выбранным маршрутом.
      </p>

      <p>
        Это создает более плавный пользовательский опыт, уменьшает время
        загрузки и позволяет разработчикам создавать богатые и интерактивные
        приложения{" "}
      </p>

      <p>
        Кроме того, роутинг обеспечивает возможность передачи параметров через
        URL, что позволяет приложению динамически адаптироваться к разным
        условиям и сценариям использования. Например, приложение может
        отображать разные данные или компоненты на основе параметров маршрута,
        таких как идентификатор пользователя или идентификатор записи.
      </p>

      <h3>ОСНОВНЫЕ КОМПОНЕНТЫ, которые присутствуют в react-router-dom v6:</h3>

      <ol>
        <li>
          <mark>BrowserRouter:</mark> Это компонент, который оборачивает ваше
          приложение и предоставляет контекст для маршрутизации. Он используется
          для настройки основного маршрутизатора в приложении.
        </li>
        <li>
          <mark>Routes:</mark> Это компонент, который содержит определения
          маршрутов и соответствующих им компонентов. Вы определяете маршруты
          внутри компонента Routes, используя элемент Route.
        </li>
        <li>
          <mark>Route:</mark> Компонент Route используется для определения
          отдельных маршрутов и связанных с ними компонентов. Вы можете
          определить маршруты с помощью элемента Route, указывая путь URL и
          связанный с ним компонент, который будет отображаться при совпадении
          маршрута.
        </li>
        <li>
          <mark>Link и NavLink:</mark> Компоненты Link и NavLink используются
          для создания ссылок для навигации между маршрутами. Они работают
          аналогично версии 5, позволяя пользователю переходить к
          соответствующим маршрутам без перезагрузки страницы. NavLink также
          предоставляет возможности для стилизации активных ссылок и текущего
          маршрута.
        </li>
        <li>
          <mark>Outlet:</mark> Компонент Outlet является контейнером, в котором
          будут отображаться компоненты, связанные с соответствующими
          маршрутами. Он заменяет Switch из версии 5 и автоматически выбирает и
          рендерит компонент, соответствующий текущему маршруту.
        </li>
        <li>
          <mark>useNavigate:</mark> Хук useNavigate используется для программной
          навигации между маршрутами. Он позволяет вам переходить к другим
          маршрутам из компонентов или обработчиков событий.
        </li>
        <li>
          <mark>useParams:</mark> Хук useParams используется для получения
          параметров маршрута, переданных через URL. Он позволяет вам извлекать
          и использовать динамические данные из пути маршрута.
        </li>
        <li>
          <mark>useLocation:</mark> Хук useLocation используется для получения
          информации о текущем URL. Он предоставляет доступ к объекту location,
          который содержит информацию о текущем пути, параметрах и других
          деталях URL.
        </li>
      </ol>

      <p>
        Прежде чем ты начнешь использовать React Router Dom v6 в проекте,
        необходимо установить его с помощью менеджера пакетов npm или yarn. Вот
        как это сделать:
      </p>

      <ol>
        <li>Открой командную строку или терминал в корневой папке проекта.</li>
        <li>
          Для установки React Router Dom v6 с помощью npm выполни следующую
          команду:
        </li>
      </ol>

      <pre id="code">
        <code>
          {`
          npm install react-router-dom@next
          `}
        </code>
      </pre>

      <p>
        При использовании символа @next мы устанавливаем последнюю версию
        библиотеки, которая на момент написания этой статьи является версией 6.
      </p>

      <p>
        После установки React Router Dom v6 ты можешь начать использовать его в
        проекте. Для этого ты должен импортировать необходимые компоненты и
        обернуть приложение в BrowserRouter. Вот как это делается:
      </p>

      <ol>
        <li>
          В файле, где вы хотите использовать React Router Dom, добавьте
          следующий импорт:
        </li>
        <pre id="code">
          <code>
            {`
            import { BrowserRouter } from 'react-router-dom';
          `}
          </code>
        </pre>
        <li>
          Затем оберни приложение в компонент BrowserRouter. Это можно сделать в
          корневом файле проекта, например, в файле index.js, который
          используется для рендеринга приложения:
        </li>
        <pre id="code">
          <code>
            {`
            import React from 'react';
            import ReactDOM from 'react-dom';
            import { BrowserRouter } from 'react-router-dom';
            import App from './App';

            ReactDOM.render(
              <BrowserRouter>
                <App />
              </BrowserRouter>,
              document.getElementById('root')
            );
          `}
          </code>
        </pre>
      </ol>

      <p>
        Здесь оборачивается компонент App (главный компонент) в компонент
        BrowserRouter. Это позволяет React Router Dom управлять маршрутизацией
        внутри приложения.
      </p>

      <p>
        Теперь давай рассмотрим основные компоненты React Router Dom v6, которые
        помогут тебе реализовать роутинг в приложении.
      </p>

      <ol>
        <li>Routes:</li>
        <p>
          Routes - это компонент-контейнер, в котором определяют все маршруты в
          приложении. Мы используем Routes для группировки нескольких Route
          компонентов. Вот пример:
        </p>
        <pre id="code">
          <code>
            {`
            import { Routes, Route } from 'react-router-dom';

            // ...

            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/about" element={<About />} />
              <Route path="/contact" element={<Contact />} />
            </Routes>
          `}
          </code>
        </pre>
        <p>
          В этом примере мы используем Routes для определения трех маршрутов: /,
          /about и /contact. Каждый маршрут связан с соответствующим компонентом
          ({`<Home />`}, {`<About />`} и {`<Contact />`}
          ). При совпадении пути в URL с определенными путями маршрутов будет
          отображен соответствующий компонент.
        </p>

        <li>Route:</li>
        <p>
          Route - это компонент, который определяет отдельный маршрут внутри
          Routes. Каждый Route имеет свой путь (path) и элемент (element),
          который будет отображаться, когда маршрут совпадает. Вот пример:
        </p>
        <pre id="code">
          <code>
            {`
            import { Routes, Route } from 'react-router-dom';

            // ...

            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/about" element={<About />} />
              <Route path="/contact" element={<Contact />} />
            </Routes>
          `}
          </code>
        </pre>
        <p>
          В этом примере каждый Route имеет свой путь (path) и связанный с ним
          элемент (element), который будет отображаться, когда маршрут
          совпадает.
        </p>

        <p>
          Также можно использовать дополнительные атрибуты, такие как exact для
          точного совпадения пути и (*) fallback для отображения
          компонента-заглушки, если не найден ни один из маршрутов. Вот пример:
        </p>
        <pre id="code">
          <code>
            {`
            import { Routes, Route } from 'react-router-dom';

            // ...

            <Routes>
              <Route path="/" element={<Home />} />
              <Route path="/about" element={<About />} />
              <Route path="/contact" element={<Contact />} />
              <Route path="*" element={<NotFound />} />
            </Routes>
          `}
          </code>
        </pre>
        <p>
          В этом примере мы добавили Route с путем "*", который соответствует
          любому несовпадающему маршруту. Он будет отображать компонент{" "}
          {`<NotFound />`}, если не найден ни один из определенных маршрутов.
        </p>

        <li>Link:</li>
        <p>
          Link используется для создания ссылок для навигации между маршрутами в
          приложении.
        </p>
        <pre id="code">
          <code>
            {`
          import { Link } from 'react-router-dom';

          // ..

          <Link to="/">Главная</Link>
          <Link to="/about">О нас</Link>
          <Link to="/contact">Контакты</Link>
          `}
          </code>
        </pre>
        <p>
          В этом примере мы создаем три ссылки: "Главная", "О нас" и "Контакты".
          Когда пользователь кликает на ссылку, он будет перенаправлен к
          соответствующему маршруту.
        </p>

        <li>NavLink:</li>
        <p>
          NavLink позволяет создавать активные ссылки, добавляя класс "active" к
          текущему активному маршруту.
        </p>
        <pre id="code">
          <code>
            {`
            import { NavLink } from 'react-router-dom';

            // ...

            <NavLink to="/" activeClassName="active">Главная</NavLink>
            <NavLink to="/about" activeClassName="active">О нас</NavLink>
            <NavLink to="/contact" activeClassName="active">Контакты</NavLink>
          `}
          </code>
        </pre>
        <p>
          В этом примере мы также создаем три ссылки, но используем NavLink.
          Атрибут to указывает путь маршрута, а activeClassName добавляет класс
          "active" к активному маршруту. Мы можем использовать этот класс для
          стилизации и выделения текущего активного маршрута.
        </p>
        <p>
          Основное отличие между Link и NavLink заключается в возможности
          создания активных ссылок с помощью NavLink. NavLink добавляет класс
          "active" к ссылке, когда соответствующий маршрут активен.
        </p>

        <li>useNavigate:</li>
        <p>
          useNavigate - это хук, который позволяет перенаправлять пользователя
          на другие маршруты в React Router Dom v6.
        </p>
        <p>
          Когда ты используешь useNavigate, ты можешь получить функцию navigate
          и использовать ее для перенаправления пользователя на другой маршрут.
          Вот пример:
        </p>
        <pre id="code">
          <code>
            {`
            import { useNavigate } from 'react-router-dom';

            // ...

            const Home = () => {
              const navigate = useNavigate();

              const handleClick = () => {
                navigate('/about');
              };

              return (
                <div>
                  <h1>Домашняя страница</h1>
                  <button onClick={handleClick}>Перейти к странице О нас</button>
                </div>
              );
            };
          `}
          </code>
        </pre>
        <p>
          В этом примере мы используем useNavigate, чтобы получить функцию
          navigate. При клике на кнопку, мы вызываем navigate и передаем ей путь
          '/about', чтобы перенаправить пользователя на страницу "О нас".
        </p>

        <li>useParams:</li>
        <p>
          useParams - это хук, который позволяет получать параметры из маршрута
          в React Router Dom v6.
        </p>
        <p>
          Когда ты используешь useParams, ты можешь получить объект params,
          который содержит значения параметров из текущего маршрута. Вот пример:
        </p>
        <pre id="code">
          <code>
            {`
            import { useParams } from 'react-router-dom';

            // ...

            const UserProfile = () => {
              const params = useParams();

              return (
                <div>
                  <h1>Профиль пользователя: {params.username}</h1>
                </div>
              );
            };
          `}
          </code>
        </pre>
        <p>
          В этом примере мы используем useParams, чтобы получить объект params.
          Здесь мы предполагаем, что в маршруте у нас есть параметр :username, и
          мы выводим его значение на странице профиля пользователя.
        </p>

        <li>useLocation:</li>
        <p>
          useLocation - это хук, который позволяет получать информацию о текущем
          URL и его параметрах в React Router Dom v6.
        </p>
        <p>
          Когда ты используешь useLocation, ты можешь получить объект location,
          который содержит информацию о текущем URL. Вот пример:
        </p>
        <pre id="code">
          <code>
            {`
            import { useLocation } from 'react-router-dom';

            // ...

            const Page = () => {
              const location = useLocation();

              return (
                <div>
                  <h1>Текущий URL: {location.pathname}</h1>
                </div>
              );
            };
          `}
          </code>
        </pre>
        <p>
          В этом примере мы используем useLocation, чтобы получить объект
          location. Здесь мы выводим путь (pathname) текущего URL на странице.
        </p>

        <li>Outlet:</li>
        <p>
          Outlet - играет ключевую роль в отображении компонентов,
          соответствующих текущему маршруту.
        </p>
        <p>
          Когда ты используешь Outlet, он служит контейнером для отображения
          компонентов, которые соответствуют маршрутам в твоем приложении. Вот
          пример:
        </p>
        <pre id="code">
          <code>
            {`
            import { Outlet } from 'react-router-dom';

            // ...

            const App = () => {
              return (
                <div>
                  <h1>Мое приложение</h1>
                  <nav>
                    {/* Навигационные ссылки */}
                  </nav>
                  <div>
                    <Outlet />
                  </div>
                </div>
              );
            };
          `}
          </code>
        </pre>
      </ol>

      <p>
        В этом примере мы используем Outlet внутри компонента App. Outlet
        является местом, где будут отображаться компоненты, соответствующие
        текущему маршруту.
      </p>

      <p>
        Когда пользователь переходит по разным маршрутам, Outlet автоматически
        рендерит компоненты, связанные с этими маршрутами. Например, если
        текущий маршрут - "/about", то компонент, соответствующий этому
        маршруту, будет отображен внутри Outlet.
      </p>

      <p>
        Важно отметить, что Outlet должен быть расположен внутри компонента,
        который уже является частью маршрутизации, например, внутри компонента,
        который используется в маршруте.
      </p>

      <p>
        Например, если у тебя есть маршрут "/about", определенный с
        использованием компонента AboutPage, то Outlet должен быть включен
        внутри AboutPage для отображения компонентов, соответствующих вложенным
        маршрутам внутри "/about".
      </p>

      <p>
        Использование Outlet позволяет тебе динамически отображать компоненты на
        основе текущего маршрута без необходимости явно указывать их в коде.
      </p>

      <h2>Примеры</h2>

      <h3>Параметры маршрутов: передача динамических данных через URL</h3>

      <p>
        Часто в веб-приложениях нам требуется передавать динамические данные
        через URL. Например, мы можем хотеть отображать подробности конкретного
        элемента списка, где каждый элемент имеет уникальный идентификатор.{" "}
      </p>

      <p>
        В React Router Dom v6 мы можем использовать параметры маршрутов для
        передачи таких данных.
      </p>

      <h4>Определение параметров маршрутов</h4>

      <p>
        Чтобы определить параметр маршрута, мы используем двоеточие (:) перед
        именем параметра в пути маршрута.{" "}
      </p>

      <pre id="code">
        <code>
          {`
          <Route path="/users/:id" element={<UserDetailPage />} />
          `}
        </code>
      </pre>

      <p>
        В этом примере мы определяем маршрут "/users/:id", где :id является
        параметром маршрута. Значение этого параметра будет динамически меняться
        в зависимости от выбранного пользователя.
      </p>

      <h4>Использование параметров маршрутов</h4>

      <p>
        Для доступа к значению параметра маршрута мы можем использовать хук
        useParams(). Он позволяет нам получить объект с значениями всех
        параметров маршрута.
      </p>

      <p>Вот пример использования useParams():</p>

      <pre id="code">
        <code>
          {`
          import { useParams } from 'react-router-dom';

          const UserDetailPage = () => {
            const { id } = useParams();

            return (
              <div>
                <h2>Детали пользователя с ID {id}</h2>
                {/* Дополнительный контент */}
              </div>
            );
          };
          `}
        </code>
      </pre>

      <p>
        В этом примере мы используем useParams() для получения значения
        параметра id. Затем мы можем использовать это значение внутри компонента
        UserDetailPage, например, для отображения деталей пользователя с
        указанным идентификатором.
      </p>

      <h4>Пример использования параметров маршрутов</h4>

      <pre id="code">
        <code>
          {`
          <Routes>
            <Route path="/users/:id" element={<UserDetailPage />} />
            <Route path="/products/:productId" element={<ProductDetailPage />} />
          </Routes>
          `}
        </code>
      </pre>

      <p>
        В этом примере мы определяем два маршрута, где каждый имеет свой
        параметр: id для пользователей и productId для продуктов. Мы связываем
        эти маршруты с соответствующими компонентами, которые будут отображаться
        при совпадении маршрутов.
      </p>

      <h3>Вложенные маршруты: создание иерархии маршрутов</h3>

      <p>
        В некоторых случаях нам нужно создать иерархию маршрутов, где
        определенные маршруты будут вложены в другие. Например, мы можем иметь
        главную страницу, на которой есть навигационное меню, и каждый пункт
        меню будет отображать свой собственный подмаршрут.{" "}
      </p>

      <h4>Определение вложенных маршрутов</h4>

      <p>
        Для создания вложенных маршрутов мы используем компонент Routes и
        определяем внутри него другие компоненты Route. Вложенные Route должны
        быть вложены в соответствующий родительский маршрут.
      </p>

      <pre id="code">
        <code>
          {`
          import { Routes, Route } from 'react-router-dom';

          const App = () => {
            return (
              <div>
                <h1>Мое приложение</h1>
                <Routes>
                  <Route path="/" element={<HomePage />} />
                  <Route path="/about" element={<AboutPage />} />
                  <Route path="/products" element={<ProductsPage />}>
                    <Route path="/" element={<AllProducts />} />
                    <Route path="/:id" element={<ProductDetail />} />
                  </Route>
                  <Route path="/contact" element={<ContactPage />} />
                </Routes>
              </div>
            );
          };
          `}
        </code>
      </pre>

      <p>
        В этом примере у нас есть родительский маршрут "/products", который
        содержит два вложенных маршрута: "/" и "/:id". При переходе на путь
        "/products" будет отображаться компонент ProductsPage, а при переходе на
        путь "/products/:id" будет отображаться компонент ProductDetail.
      </p>

      <h4>Использование вложенных маршрутов</h4>

      <p>
        Для использования вложенных маршрутов внутри компонента ProductsPage мы
        используем компонент Outlet.{" "}
      </p>

      <p>Outlet определяет место, где будут отображаться вложенные маршруты.</p>

      <pre id="code">
        <code>
          {`
          const ProductsPage = () => {
            return (
              <div>
                <h2>Страница продуктов</h2>
                <ul>
                  <li>
                    <Link to="/">Все продукты</Link>
                  </li>
                  <li>
                    <Link to="/products/1">Продукт 1</Link>
                  </li>
                  <li>
                    <Link to="/products/2">Продукт 2</Link>
                  </li>
                </ul>
                <Outlet />
              </div>
            );
          };
          `}
        </code>
      </pre>

      <p>
        В этом примере компонент ProductsPage содержит ссылки на различные
        продукты. Компонент Outlet определяет место, где будут отображаться
        вложенные маршруты, т.е. компоненты {`<AllProducts />`} и{" "}
        {`<ProductDetail />`} в нашем случае.
      </p>

      <h3>PrivateRoute: Защита маршрутов</h3>

      <h4>PrivateRoute: Защита маршрутов</h4>

      <p>
        В некоторых случаях может потребоваться ограничить доступ к определенным
        маршрутам и дать доступ к ним только для аутентифицированных
        пользователей. Для этого можно создать компонент PrivateRoute, который
        будет проверять статус аутентификации пользователя и редиректить его в
        случае необходимости.
      </p>

      <p>
        Для создания компонента PrivateRoute можно воспользоваться компонентом
        Route из React Router Dom v6 и добавить логику проверки аутентификации.
      </p>

      <pre id="code">
        <code>
          {`
          import { Route, Navigate } from 'react-router-dom';

          const PrivateRoute = ({ ...props }) => {
            const isAuth = // Логика проверки аутентификации пользователя
            return isAuth ? <Route {...props} /> : <Navigate to="/login" replace />;
          };
          `}
        </code>
      </pre>

      <p>
        В этом примере PrivateRoute проверяет аутентифицирован ли пользователь.
        Например проверит наличие token в LocalStorage. Если пользователь
        аутентифицирован, компонент PrivateRoute отображает Route с переданными
        пропсами, в противном случае происходит редирект на страницу входа с
        помощью компонента Navigate.
      </p>

      <h4>Использование компонента PrivateRoute</h4>

      <p>
        Теперь можно использовать компонент PrivateRoute для защиты маршрутов,
        доступных только для аутентифицированных пользователей.
      </p>

      <pre id="code">
        <code>
          {`
          import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';

          const App = () => {

            return (
              <Router>
                <Routes>
                  <Route path="/login" element={<LoginPage />} />
                  <PrivateRoute path="/dashboard" element={<DashboardPage />} />
                </Routes>
              </Router>
            );
          };
          `}
        </code>
      </pre>

      <p>
        В этом примере используется PrivateRoute для маршрута "/dashboard". Если
        пользователь не аутентифицирован, он будет перенаправлен на страницу
        входа "/login". Если пользователь аутентифицирован, он получит доступ к
        защищенному маршруту "/dashboard".
      </p>

      <NavigateHelpers callback={props.goToPage} txt="На глвыную" path="/" />
      <NavigateHelpers callback={props.goToPage} />
    </div>
  );
};

export default ReactThis;
