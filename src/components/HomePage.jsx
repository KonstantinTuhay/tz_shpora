import React from "react";
import { useNavigate } from "react-router-dom";
import NavigateHelpers from "../helpers/NavigateHelpers";

const HomePage = (props) => {
  const navigate = useNavigate();

  return (
    <>
      <h1>Быстрый старт</h1>

      <h2>Создание и вложение компонентов</h2>

      <p>
        Приложения React состоят из компонентов . Компонент — это часть
        пользовательского интерфейса (пользовательского интерфейса), имеющая
        свою логику и внешний вид. Компонент может быть размером с кнопку или
        размером с целую страницу.
      </p>

      <p>
        Компоненты React — это функции JavaScript, которые возвращают разметку:
      </p>

      <pre id="code">
        <code>
          {`
          function MyButton() {
            return (
              <button>I'm a button</button>
            );
          }
          `}
        </code>
      </pre>

      <p>
        Теперь, когда вы объявили MyButton, вы можете вложить его в другой
        компонент:
      </p>

      <pre id="code">
        <code>
          {`
          export default function MyApp() {
            return (
              <div>
                <h1>Welcome to my app</h1>
                <MyButton />
              </div>
            );
          }
          `}
        </code>
      </pre>

      <p>
        Обратите внимание, что оно MyButton начинается с заглавной буквы. Вот
        откуда вы знаете, что это компонент React. Имена компонентов React
        всегда должны начинаться с заглавной буквы, а теги HTML должны быть
        строчными.
      </p>

      <h2>Написание разметки с помощью JSX</h2>

      <p>
        JSX более строгий, чем HTML. Вам придется закрыть теги типа <br />. Ваш
        компонент также не может возвращать несколько тегов JSX. Вам нужно
        обернуть их в общий родительский элемент, например в{" "}
        <span>
          <div>...</div>
        </span>
        {/* КАК ДОБАВЛЯТЬ HTML ИЛИ КАКОЙ ЛИБО КОД В JSX */}
        пустую <>...</>оболочку или:
      </p>

      <pre id="code">
        <code>
          {`
          function AboutPage() {
            return (
              <>
                <h1>About</h1>
                <p>Hello there.<br />How do you do?</p>
              </>
            );
          }
          `}
        </code>
      </pre>

      <h2>Добавление стилей</h2>

      <p>
        В React вы указываете класс CSS с помощью className. Он работает так же,
        как classатрибут HTML:
      </p>

      <pre id="code">
        <code>
          {`
          <img className="avatar" />
          `}
        </code>
      </pre>

      <p>Затем вы записываете для него правила CSS в отдельный файл CSS:</p>

      <pre id="code">
        <code>
          {`
          /* In your CSS */
          .avatar {
            border-radius: 50%;
          }
          `}
        </code>
      </pre>

      <p>
        React не предписывает, как добавлять файлы CSS. В простейшем случае вы
        добавите link тег в свой HTML. Если вы используете инструмент сборки или
        фреймворк, обратитесь к его документации, чтобы узнать, как добавить
        файл CSS в ваш проект.
      </p>

      <h2>Отображение данных</h2>

      <p>
        JSX позволяет добавлять разметку в JavaScript. Фигурные скобки позволяют
        вам встроить некоторую переменную из своего кода и отобразить ее
        пользователю. Например, это отобразит user.name:
      </p>

      <pre id="code">
        <code>
          {`
          return (
            <h1>
              {user.name}
            </h1>
          );
          `}
        </code>
      </pre>

      <p>
        Вы также можете «убежать в JavaScript» из атрибутов JSX, но вместо
        кавычек вам придется использовать фигурные скобки . Например, строка
        className="avatar"передается "avatar"как класс CSS, но src=
        user.imageUrl считывает значение переменной JavaScript user.imageUrl, а
        затем передает это значение как srcатрибут:
      </p>

      <pre id="code">
        <code>
          {`
          return (
            <img
              className="avatar"
              src={user.imageUrl}
            />
          );
          `}
        </code>
      </pre>

      <h2>Условный рендеринг</h2>

      <p>
        В React нет специального синтаксиса для написания условий. Вместо этого
        вы будете использовать те же методы, что и при написании обычного кода
        JavaScript. Например, вы можете использовать if оператор для условного
        включения JSX:
      </p>

      <pre id="code">
        <code>
          {`
          let content;
          if (isLoggedIn) {
            content = <AdminPanel />;
          } else {
            content = <LoginForm />;
          }
          return (
            <div>
              {content}
            </div>
          );
          `}
        </code>
      </pre>

      <p>
        Если вы предпочитаете более компактный код, вы можете использовать
        условный ?оператор. В отличие от if, он работает внутри JSX:
      </p>

      <pre id="code">
        <code>
          {`
          <div>
            {isLoggedIn ? (
             <AdminPanel />
            ) : (
              <LoginForm />
            )}
          </div>
          `}
        </code>
      </pre>

      <p>
        Если вам не нужна ветвь else, вы также можете использовать более
        короткий логический && синтаксис :
      </p>

      <pre id="code">
        <code>
          {`
          <div>
           {isLoggedIn && <AdminPanel />}
          </div>
          `}
        </code>
      </pre>

      <h2>Списки рендеринга</h2>

      <p>Предположим, что у вас есть массив продуктов:</p>

      <pre id="code">
        <code>
          {`
          const products = [
            { title: 'Cabbage', id: 1 },
            { title: 'Garlic', id: 2 },
            { title: 'Apple', id: 3 },
          ];
          `}
        </code>
      </pre>

      <p>
        Внутри вашего компонента используйте map() функцию для преобразования
        массива продуктов в массив li элементов:
      </p>

      <pre id="code">
        <code>
          {`
          const listItems = products.map(product =>
            <li key={product.id}>
              {product.title}
            </li>
          );
          
          return (
            <ul>{listItems}</ul>
          );
          `}
        </code>
      </pre>

      <p>
        Обратите внимание, как li имеет keyатрибут. Для каждого элемента списка
        вы должны передать строку или число, которое однозначно идентифицирует
        этот элемент среди его одноуровневых элементов. Обычно ключ должен
        исходить из ваших данных, например идентификатор базы данных. React
        использует ваши ключи, чтобы знать, что произойдет, если вы позже
        вставите, удалите или измените порядок элементов.
      </p>

      <h2>Реагирование на события</h2>

      <p>
        Вы можете реагировать на события, объявляя функции обработчика событий
        внутри ваших компонентов:
      </p>

      <pre id="code">
        <code>
          {`
          function MyButton() {
            function handleClick() {
              alert('You clicked me!');
            }
          
            return (
              <button onClick={handleClick}>
                Click me
              </button>
            );
          }
          `}
        </code>
      </pre>

      <p>
        Обратите внимание: onClick=handleClick в конце нет круглых скобок! Не
        вызывайте функцию-обработчик событий: вам нужно только передать ее .
        React вызовет ваш обработчик событий, когда пользователь нажмет кнопку.
      </p>

      <h2>Обновление экрана</h2>

      <p>
        Часто вам нужно, чтобы ваш компонент «запоминал» некоторую информацию и
        отображал ее. Например, возможно, вы хотите подсчитать, сколько раз была
        нажата кнопка. Для этого добавьте состояние в ваш компонент.
      </p>

      <p>Сначала импортируйте useStateиз React:</p>

      <pre id="code">
        <code>
          {`
          import { useState } from 'react';
          `}
        </code>
      </pre>

      <p>
        Теперь вы можете объявить переменную состояния внутри вашего компонента:
      </p>

      <pre id="code">
        <code>
          {`
          function MyButton() {
            const [count, setCount] = useState(0);
            // ...
          `}
        </code>
      </pre>

      <p>
        Вы получите две вещи useState: текущее состояние ( count) и функцию,
        позволяющую его обновить ( setCount). Вы можете дать им любые имена, но
        принято писать [something, setSomething].
      </p>

      <p>
        Кнопка отобразит в первый раз, count равный 0. Если вы хотите изменить
        состояние, вызовите setCount() и передайте ему новое значение. Нажатие
        этой кнопки увеличит счетчик:
      </p>

      <pre id="code">
        <code>
          {`
          function MyButton() {
            const [count, setCount] = useState(0);
          
            function handleClick() {
              setCount(count + 1);
            }
          
            return (
              <button onClick={handleClick}>
                Clicked {count} times
              </button>
            );
          }
          `}
        </code>
      </pre>

      <h2>Использование хуков</h2>

      <p>
        Функции, начинающиеся с, use называются хуками. useState— это встроенный
        хук, предоставляемый React. Другие встроенные хуки вы можете найти в
        справочнике по API. Вы также можете писать свои собственные хуки,
        комбинируя существующие.
      </p>

      <p>
        Хуки более ограничительны, чем другие функции. Вы можете вызывать хуки
        только в верхней части ваших компонентов (или других хуков). Если вы
        хотите использовать его useStateв условии или цикле, извлеките новый
        компонент и поместите его туда.
      </p>

      <h2>Обмен данными между компонентами</h2>

      <p>
        В предыдущем примере у каждого MyButton был свой собственный независимый
        count, и при нажатии каждой кнопки count менялось только значение для
        нажатой кнопки:
      </p>

      <NavigateHelpers callback={props.goToPage} />
    </>
  );
};

export default HomePage;
